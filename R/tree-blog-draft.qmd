---
title: 'Tree Growth Draft'
output: html_document
format: 
  html:
    code-fold: true
    code-summary: "View Code"
---

```{r,include=FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

## Background

The data collected spans the years 2012-2016 and measures tree diameter at breast height. During this time, there was a drought. My statistical analysis will evaluate 4 of the most commonly sampled tree species (maybe families) to see which fared better during the drought. I have added climate data to test for potential omitted variables bias. After creating the linear model, I'll conduct a time series analysis to view the seasonality and trends in growth. Since the drought was over this entire period of time, it's possible there will be a slow in growth for all species as the drought continues.

Load Libraries

```{r, results='hide'}
# data processing
library(tidyverse)
library(here)
library(janitor)
library(lubridate)

# plotting/aesthetics
library(gridExtra)
library(gt)

# time series packages
library(feasts)
library(tsibble)
```

Read in Data

```{r, results='hide'}
# load tree data
dbh_raw <- read_csv(here('data/long.data.DBH.csv'))

# load daily climate data
#clim_data_raw <- read_csv(here('data/EVFSTowerMetDaily_2023v2.csv'))

# read in hourly clim data
clim_1999_2014 <- read_csv(here("data/NADPTowerHourlyData1999_2014.csv")) %>% clean_names()
clim_2015_2023 <- read_csv(here('data/NADPTowerHourlyData2015_2023v2.csv')) %>% clean_names()

```

## Data Cleaning

### Tree Growth Data

Dates are originally in Julian day and year, so these need to be converted to a `date` columm with the proper data type. Additionally, I checked for the most common species & created a subset of this tree type to potentially limit ommited variables bias.

```{r, eval=FALSE}
## ========== Not Used ==========
# add family data to df
dbh_raw <- dbh_raw %>% mutate(family =
                     case_when(species == 'ALCFLO' ~ 'Euphorbiaceae',
                               species == 'ALCLAT' ~ 'Euphorbiaceae',
                               species == 'ANDINE' ~ 'Fabaceae-papilionoideae',
                               species == 'CALCAL' ~ 'Clusiaceae',
                               species == 'CASARB' ~ 'Salicaceae',
                               species == 'CASSYL' ~ 'Salicaceae',
                               species == 'CORSUL' ~ 'Boraginaceae',
                               species == 'CROPOE' ~ 'Euphorbiaceae',
                               species == 'CYAARB' ~ NA,
                               species == 'DACEXC' ~ 'Burseraceae',
                               species == 'DENARB' ~ 'Araliaceae',
                               species == 'DRYGLA' ~ 'Putranjivaceae',
                               species == 'EUGDOM' ~ 'Myrtaceae',
                               species == 'GUAGUI' ~ 'Meliaceae',
                               species == 'GUEVAL' ~ 'Rubiaceae',
                               species == 'GUTCAR' ~ 'Annonaceae',
                               species == 'HOMRAC' ~ 'Salicaceae',
                               species == 'INGLAU' ~ 'Fabaceae-mimosoideae',
                               species == 'MANBID' ~ 'Sapotaceae',
                               species == 'MATDOM' ~ 'Sapindaceae',
                               species == 'MELHER' ~ 'Sabiaceae',
                               species == 'MIRCHR' ~ 'Sapotaceae',
                               species == 'SAPLAU' ~ 'Euphorbiaceae',
                               species == 'SLOBER' ~ 'Elaeocarpaceae',
                               species == 'TABHET' ~ 'Bignoniaceae'))
```

```{r}
# clean tree species data
species_list <- c('DACEXC', 'MANBID', 'CASARB', 'INGLAU')

dbh <- dbh_raw %>% 
  mutate(date = as.Date(paste(year, doy, sep="-"),"%Y-%j")) %>% 
  rename(dbh_mm = dbh) %>% 
  filter(species %in% species_list) %>% 
  select(-c('doy', 'year','flag')) %>% 
  group_by(date,species) %>% 
  mutate(mean_daily_dbh = mean(dbh_mm, na.rm = TRUE),
         year_mo = yearmonth(date)) %>% 
  ungroup() %>% 
  filter(date(date) >= "2014-06-01" &
           date(date) < "2016-08-01")

colSums(is.na(dbh))
```

### Climate Daily

Climate data ranges from 2000-2022 and needs to be limited to the time period where data on trees was collected. There is more meteorological data than needed, so I selected key columns of interest. I might relate rain to growth, and then add `ppfd_millimoles_m2` as a potential omitted variable. This is "photosynthetic photon flux density" which is a measure of photosynthetically active photons (400-700nm) hitting a surface per unit area per unit time. In my own words, this is a measure of the presence of photons that can be utilized for photosynthesis, since not all wavelengths are used by plants.

```{r, eval=FALSE}
## ========== Daily data not used ======
# clean data
clim_data <- clim_data_raw %>% 
  clean_names() %>% 
  select(c('date', 'year', 'rain_mm', 'tempmax_degreescelsius', 'ppfd_millimoles_m2')) %>%  #select columns of interest for glm
  rename('max_temp_c' = 'tempmax_degreescelsius')

# asses number of NAs for each variable
colSums(is.na(clim_data))
```

### Climate Hourly

Based on the `is.na()` assesment, there are a lot of missing dates for the daily data. I loaded the hourly data to see if I could calculate a rolling average with more accurate dates. Hourly had less NA values, so I removed the daily climate items from my environment, but left them in the code in case I needed it later.

```{r, eval=FALSE}
## ========== Original Data Cleaning ==========
# 1999-2014 clean and filter
hourly_clim_a <- clim_1999_2014 %>% 
  mutate(datetime = mdy_hm(datetime)) %>% 
  filter(year(datetime) > 2011) %>% 
  select(c('datetime', 'rain_mm', 'temp_air_degrees_c', 'ppfd_millimoles_m2_hour')) %>% 
  rename('temp_c' = 'temp_air_degrees_c')

# 2015-2023 clean and filter
hourly_clim_b <- clim_2015_2023 %>% 
  mutate(datetime = ymd_hms(datetime)) %>% 
  filter(year(datetime) < 2017) %>% 
  select(c('datetime', 'rain_mm_tot', 'air_tc_avg', 'par_tot')) %>% 
  rename('rain_mm' = 'rain_mm_tot',
         'temp_c' = 'air_tc_avg',
         'ppfd_millimoles_m2_hour' = 'par_tot')

# check column names match
colnames(hourly_clim_a) == colnames(hourly_clim_b)

# bind df together
hourly_clim <- rbind(hourly_clim_a, hourly_clim_b)

# assess NAs
colSums(is.na(hourly_clim))

# calculate average (hourly -> daily)
daily_clim <- hourly_clim %>% 
  group_by(date = date(datetime)) %>% 
  summarise(tot_rain_mm = sum(rain_mm, na.rm = TRUE),
            avg_temp_c = mean(temp_c, na.rm = TRUE),
            avg_ppfd_millimoles_m2 = mean(ppfd_millimoles_m2_hour, na.rm = TRUE)) %>% 
  mutate(year_mo = yearmonth(date))
```

```{r, results='hide'}
## ========== Cleaning in Blog ==========
# clean and filter data from 1999-2014
clim_1999_2014 <- clim_1999_2014 %>% 
  mutate(datetime = mdy_hm(datetime)) %>% 
  filter(date(datetime) >= "2014-06-01" &
           date(datetime) != "2015-01-01") %>% 
  select(c('datetime', 'rain_mm', 'temp_air_degrees_c', 'ppfd_millimoles_m2_hour')) %>% 
  rename('temp_c' = 'temp_air_degrees_c')

# clean and filter data from 2015-2023
clim_2015_2023 <- clim_2015_2023 %>% 
  mutate(datetime = ymd_hms(datetime)) %>% 
  filter(date(datetime) < "2016-08-01") %>% 
  select(c('datetime', 'rain_mm_tot', 'air_tc_avg', 'par_tot')) %>% 
  rename('rain_mm' = 'rain_mm_tot',
         'temp_c' = 'air_tc_avg',
         'ppfd_millimoles_m2_hour' = 'par_tot')

# bind to combine study time (June 2014 - July 2016)
hourly_conditions <- rbind(clim_1999_2014, clim_2015_2023) %>% 
  mutate(year_mo = yearmonth(datetime))

# convert hourly climate to daily averages
daily_conditions <- hourly_conditions %>% 
  group_by(date = date(datetime)) %>% 
  summarise(tot_rain_mm = sum(rain_mm, na.rm = TRUE),
            avg_temp_c = mean(temp_c, na.rm = TRUE),
            avg_ppfd_millimoles_m2 = mean(ppfd_millimoles_m2_hour, na.rm = TRUE)) %>% 
   mutate(year_mo = yearmonth(date))
  

# remove raw data variables
rm(clim_1999_2014, clim_2015_2023, dbh_raw)
```

## Data Exploration

### Tree Growth Data

The tree growth data has less missing values, so I decided to start my exploration with this. Here, I'm primarily looking for slower growth as time goes on, since the drought likely increased in severity.

**All diameters over time:**

```{r}
# plot diameter breast height over time
ggplot(dbh, aes(x=date, y = dbh_mm, col = species)) +
  geom_point() + theme_minimal() + facet_wrap(~species) + geom_smooth(color='black') + theme_classic()
```

**Mean diameter over time:**

Samples were taken all on the same day, so grouping by date and family produces the mean dbh for a specific day. Based on this alone, it's hard to see growth over time, likely because taking the mean of a wide variety of diameters diminishes the trend slightly.

```{r, eval=FALSE}
# create plots for each family (facet wrap makes growth hard to see)
bur_plt <- mean_dbh %>% 
  filter(family == 'Burseraceae') %>% 
  ggplot(aes(x = date, y = mean_daily_dbh)) +
  geom_point() +
  labs(title = 'Burseraceae')

sal_plt <- mean_dbh %>% 
  filter(family == 'Salicaceae') %>% 
  ggplot(aes(x = date, y = mean_daily_dbh)) +
  geom_point() +
  labs(title = 'Salicaceae')

sap_plt <- mean_dbh %>% 
  filter(family == 'Sapotaceae') %>% 
  ggplot(aes(x = date, y = mean_daily_dbh)) +
  geom_point() +
  labs(title = 'Sapotaceae')

eup_plt <- mean_dbh %>% 
  filter(family == 'Euphorbiaceae') %>% 
  ggplot(aes(x = date, y = mean_daily_dbh)) +
  geom_point() +
  labs(title = 'Euphorbiaceae')

# plot all families
grid.arrange(bur_plt, sal_plt, sap_plt, eup_plt, nrow = 2, ncol = 2)
```

```{r}
ggplot(data = dbh, aes(x=date, y= mean_daily_dbh, col = species)) +
  geom_point() +
  labs(x = "Date",
       y = "Diameter at Breast Height (mm)",
       title = "Mean Diameter of Species") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5)) +
  facet_wrap(~species, scales = "free_y")

```

### Climate Data

Now I'm going to look at climate variables of interest over time. There is a lot of data that has a year, but not a specific day.

**Plot climate variables over time**:

```{r, eval=FALSE}
## ========== Original Code w/Daily Climate ==========
rain <- ggplot(daily_clim, aes(x = yearmonth(date), y = tot_rain_mm)) +
  geom_col(fill = 'steelblue1') + theme_minimal() +
  labs(x = 'Month',
       y = 'Monthly Rain (mm)')

temp <- ggplot(daily_clim, aes(x = yearmonth(date), y = avg_temp_c)) +
  geom_col(fill = 'firebrick') + theme_minimal() +
  labs(x = 'Month',
       y = 'Avg Monthly Temp (C)')

ppfd <- ggplot(daily_clim, aes(x = yearmonth(date), y = avg_ppfd_millimoles_m2)) +
  geom_col(fill = 'palegreen3') + theme_minimal() +
  labs(x = 'Month',
       y = 'Photosynthetic Flux Density (millimoes/m2)')

grid.arrange(rain, ppfd, temp, ncol = 2)
```

::: panel-tabset
#### Total Rain

```{R}
ggplot(daily_conditions, aes(x=year_mo, y = tot_rain_mm)) +
  geom_col(fill = 'cornflowerblue') +
  theme_classic() +
  labs(x = "Month",
       y = "Total Rain (mm)")
```

#### Average Temperature

```{R}
ggplot(daily_conditions, aes(x=year_mo, y = avg_temp_c)) +
  geom_col(fill = 'firebrick') +
  theme_classic() +
  labs(x = "Month",
       y = "Average Temperature (°C)")
```

#### Photosynthetic Flux

```{R}
ggplot(daily_conditions, aes(x=year_mo, y = avg_ppfd_millimoles_m2)) +
  geom_col(fill = 'palegreen3') +
  theme_classic() +
  labs(x = "Month",
       y = "Photosynthetic Photon Flux Density (mmol/m2)")
```
:::

## Time Series Analysis

### Climate Variable Decomposition

**Preparation**:

The `feasts()` package was not working with large gaps in the data, and unfortunately were was missing data for the last 3 months of 2012, and February 2014. To skip the 2012 gap, I simply removed that year from the analysis. I then created a new data frame that averaged by year-month, to run the decomposition analysis.

```{r, eval=FALSE}
# find what months/years are missing data (cant run decomp w/missing data)
lapply(split(daily_clim,format(as.Date(daily_clim$date),"%Y")), 
       function(x) month.name[setdiff(seq(12),as.numeric(format(as.Date(x$date),"%m")))])

# create year_mon averages, excluding 2012
mon_clim <- hourly_clim %>%
  filter(year(datetime) > 2012) %>% 
  group_by(year_mo = yearmonth(datetime)) %>%
  summarise(tot_rain_mm = sum(rain_mm, na.rm = TRUE),
            avg_temp_c = mean(temp_c, na.rm = TRUE),
            avg_ppfd_millimoles_m2 = mean(ppfd_millimoles_m2_hour, na.rm = TRUE)) %>%  as_tsibble(index = year_mo)
```

```{r}
# check what months/years are missing (between June 2014 - July 2016)
lapply(split(daily_conditions,format(as.Date(daily_conditions$date),"%Y")), 
       function(x) month.name[setdiff(seq(12),as.numeric(format(as.Date(x$date),"%m")))])


```

**Rain decomposition**:

```{r, eval=FALSE}
# create rain decomp
rain_dcmp <- mon_clim %>% 
  model(STL(tot_rain_mm))

# plot
components(rain_dcmp) %>% autoplot()
```

```{r, eval=FALSE}
tb <- daily_conditions %>% 
  as_tsibble(index = date) %>% 
  fill_gaps() %>% 
  model(STL(tot_rain_mm))

components(tb) %>% autoplot()
```

**Temperature decomposition**:

For temperature and ppfd there was no data for February 2014, to avoid removing another entire year I took the average of January and March 2014 and filled in the individual cell values.

```{r, eval=FALSE}
# fill data for Feb 2014
mon_clim[14, 3] = (21.89624+22.24512)/2
mon_clim[14, 4] = (376.9210+584.9981)/2
```

```{r, eval=FALSE}
temp_dcmp <- mon_clim %>% 
  model(STL(avg_temp_c))

components(temp_dcmp) %>% autoplot()
```

**Photosynthetic Flux Density Decomposition:**

```{r, eval=FALSE}
ppfd_dcmp <- mon_clim %>% 
  model(STL(avg_ppfd_millimoles_m2))

components(ppfd_dcmp) %>% autoplot()
```

### Climate Variable Autocorrelation

Only average temperature showed strong seasonality patterns, so I used it as an autocorrelation example. The autocorrelation plots for rain and ppfd are commented out.

```{r, eval=FALSE}
acf(mon_clim$avg_temp_c, lag.max = 12, na.action = na.pass,  main = 'Autocorrelation for Daily Temperature')

# acf(mon_clim$tot_rain_mm, lag.max = 12, na.action = na.pass,  main = 'Autocorrelation for Daily Rain')
# 
# acf(mon_clim$avg_ppfd_millimoles_m2, lag.max = 12, na.action = na.pass,  main = 'Autocorrelation for PPFD')
```

```{r, eval=FALSE}
acf(mon_clim$avg_ppfd_millimoles_m2, lag.max = 12, na.action = na.pass,  main = 'Autocorrelation for Daily Temperature')
```

## Statistical Analysis

To begin, I am going to conduct linear model using time as one of my components. I will then add climate variables to see if they improve the model

### Linear Model - Only DBH

**Base model**: This model looks at daily dbh for all four families, unsurprisingly the intercept is very low. This is likely because the averages minimize any notable changes in growth, as we saw in the initial plot

```{r, eval=FALSE}
simple_model <- lm(mean_daily_dbh ~ date, data = mean_dbh)
summary(simple_model)
```

**Family Models:** Creating models for individuals species...

```{r, eval=FALSE}
# create family subsets
bur <- mean_dbh %>% filter(family == 'Burseraceae')
sap <- mean_dbh %>% filter(family == 'Sapotaceae')
eup <- mean_dbh %>% filter(family == 'Euphorbiaceae')
sal <- mean_dbh %>% filter(family == 'Salicaceae')
```

```{r, eval=FALSE}
# run models for all 
bur_model <- lm(mean_daily_dbh ~ date, data = bur)
sap_model <- lm(mean_daily_dbh ~ date, data = sap)
eup_model <- lm(mean_daily_dbh ~ date, data = eup)
sal_model <- lm(mean_daily_dbh ~ date, data = sal)

# view results
summary(bur_model)
summary(sap_model)
summary(eup_model)
summary(sal_model)
```

### Decomposing DBH

In addition to the climate variables, it is also useful to conduct a decomposition of diameter breast height for. Not sure if I'll do this because the data is not consistent enough, maybe I can try an actual rolling average before the decomp this time.

```{r}
# rolling_test <- bur %>% 
#   group_by(tag) %>% 
#   mutate(avg_14_days = rollmean(dbh_mm, k = 14, fill=NA))
```
